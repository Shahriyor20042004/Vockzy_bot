# main.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, PollAnswer, BotCommandScopeAllPrivateChats, BotCommand
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command, CommandStart
from sql import init_db, get_words_for_user, add_word, delete_all_words
from config import API_TOKEN
import random
import logging
import asyncio
import fitz
import re
import json, urllib.parse
from aiogram import types

# –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# –ù–ï –≤—ã–∑—ã–≤–∞—Ç—å include_router –∑–¥–µ—Å—å ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª—è–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –ø–æ—Ç–æ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä

active_tests = {}
current_polls = {}
pending_answers = {}

stop_test_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="stop_test")]]
)

# ---------------- handlers ----------------

@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.\n"
        "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ \n"
        "- –û–±—Ä–∞–∑–µ—Ü: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥,  ...\n"
        "- –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (txt),(pdf) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤\n"
        "- /list ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤\n"
        "- /delete_all ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞\n"
        "- /test ‚Äî –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "- /swap_test ‚Äî –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–æ–±–æ—Ä–æ—Ç\n"
        "- /manual_test ‚Äî —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç\n"
        "- /game ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É —Å –≤–∞—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"
    )

@router.message(Command("add"))
async def add_command(message: Message):
    user_id = message.from_user.id
    try:
        _, words_text = message.text.split(maxsplit=1)
        word_pairs = [pair.strip().split('-', maxsplit=1) for pair in words_text.split(",")]
        added_words = []
        for pair in word_pairs:
            if len(pair) == 2:
                phrase, translation = pair
                phrase = phrase.strip()
                translation = translation.strip()
                if phrase and translation:
                    await add_word(phrase, translation, user_id)
                    added_words.append(f"{phrase} ‚Äî {translation}")
            else:
                await message.answer(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞—Ä—ã: {pair}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ - –ø–µ—Ä–µ–≤–æ–¥.")
        if added_words:
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è:\n" + "\n".join(added_words))
    except ValueError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ1 - –ø–µ—Ä–µ–≤–æ–¥1, ...")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ add_command: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤.")

@router.message(lambda message: message.document and message.document.file_name.lower().endswith(('.txt', '.pdf')))
async def handle_file(message: Message):
    user_id = message.from_user.id
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_content = await bot.download_file(file_path)

    try:
        if message.document.file_name.lower().endswith('.txt'):
            content = file_content.read().decode('utf-8')
        elif message.document.file_name.lower().endswith('.pdf'):
            with open("temp.pdf", "wb") as f:
                f.write(file_content.read())
            doc = fitz.open("temp.pdf")
            content = ""
            for page in doc:
                content += page.get_text()
            doc.close()
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .pdf —Ñ–∞–π–ª—ã.")
            return

        lines = content.splitlines()
        added_words = []

        for line in lines:
            parts = re.split(r'\s*[-‚Äì‚Äî]\s*', line, maxsplit=1)
            if len(parts) == 2:
                phrase = parts[0].strip()
                translation = parts[1].strip()
                if phrase and translation:
                    await add_word(phrase, translation, user_id)
                    added_words.append(f"{phrase} - {translation}")

        if added_words:
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞:\n" + "\n".join(added_words))
        else:
            await message.answer("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å–ª–æ–≤–æ> - <–ø–µ—Ä–µ–≤–æ–¥>")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: %s", e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")

@router.message(Command("list"))
async def list_words(message: Message):
    user_id = message.from_user.id
    try:
        words = await get_words_for_user(user_id)
        if not words:
            await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.")
            return
        word_list = "\n".join([f"{word} ‚Äî {translation}" for word, translation in words])
        for chunk in chunk_list(word_list.splitlines(), 50):
            await message.answer("\n".join(chunk))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.")
        
@router.message(Command("delete_all"))
async def delete_all_command(message: Message):
    user_id = message.from_user.id
    try:
        await delete_all_words(user_id)
        await message.answer("–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–ª–æ–≤: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤.")

def chunk_list(lst, chunk_size):
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]


# ---------- GAME handler ----------
GITHUB_GAME_URL = "https://shahriyor20042004.github.io/Game/"

@router.message(Command("game"))
async def send_game(message: types.Message):
    logger.info("Received /game from user_id=%s", message.from_user.id)
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –ë–î
        words = await get_words_for_user(user_id)
        if not words:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /add.")
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        MAX_WORDS_IN_URL = 100
        words = words[:MAX_WORDS_IN_URL]

        words_list = [[w[0], w[1]] for w in words]
        words_json = json.dumps(words_list, ensure_ascii=False)
        words_param = urllib.parse.quote(words_json)
        url = f"{GITHUB_GAME_URL}?words={words_param}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=url))]
            ]
        )

        await message.answer("–ó–∞–ø—É—Å–∫–∞–π –∏–≥—Ä—É üëá", reply_markup=keyboard)
        logger.info("Sent WebApp button for user_id=%s (words=%d)", user_id, len(words_list))

    except Exception as e:
        logger.exception("Error in /game handler for user_id=%s: %s", message.from_user.id, e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ---- —Ç–µ—Å—Ç—ã (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–∏) ----

@router.message(Command("test"))
async def start_test(message: Message):
    user_id = message.from_user.id

    if user_id in active_tests:
        await message.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", reply_markup=stop_test_keyboard)
        return

    active_tests[user_id] = True
    await message.answer("–¢–µ—Å—Ç –Ω–∞—á–∞—Ç! –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.", reply_markup=stop_test_keyboard)
    await send_next_quiz(user_id)

async def send_next_quiz(chat_id):
    if chat_id not in active_tests:
        return
    words = await get_words_for_user(chat_id)
    if not words:
        await bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add.")
        del active_tests[chat_id]
        return
    phrase, correct_answer = random.choice(words)
    all_translations = [w[1] for w in words if w[1] != correct_answer]
    wrong_answers = random.sample(all_translations, min(3, len(all_translations)))
    options = [correct_answer] + wrong_answers
    random.shuffle(options)
    poll = await bot.send_poll(
        chat_id=chat_id,
        question=f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '{phrase}'?",
        options=options,
        type="quiz",
        correct_option_id=options.index(correct_answer),
        is_anonymous=False,
        reply_markup=stop_test_keyboard
    )
    current_polls[chat_id] = poll.poll.id

@router.message(Command("swap_test"))
async def reverse_test(message: Message):
    user_id = message.from_user.id

    if user_id in active_tests:
        await message.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", reply_markup=stop_test_keyboard)
        return

    active_tests[user_id] = True
    await message.answer("–¢–µ—Å—Ç –Ω–∞—á–∞—Ç! –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.", reply_markup=stop_test_keyboard)
    await send_next_reverse_quiz(user_id)

async def send_next_reverse_quiz(chat_id):
    if chat_id not in active_tests:
        return
    words = await get_words_for_user(chat_id)
    if not words:
        await bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add.")
        del active_tests[chat_id]
        return
    correct_answer, word = random.choice(words)
    all_words = [w[0] for w in words if w[0] != correct_answer]
    wrong_answers = random.sample(all_words, min(3, len(all_words)))
    options = [correct_answer] + wrong_answers
    random.shuffle(options)
    poll = await bot.send_poll(
        chat_id=chat_id,
        question=f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '{word}'?",
        options=options,
        type="quiz",
        correct_option_id=options.index(correct_answer),
        is_anonymous=False,
        reply_markup=stop_test_keyboard
    )
    current_polls[chat_id] = poll.poll.id

@router.message(Command("manual_test"))
async def manual_test(message: Message):
    user_id = message.from_user.id

    if user_id in active_tests:
        await message.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_test –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", reply_markup=stop_test_keyboard)
        return

    words = await get_words_for_user(user_id)
    if not words:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add.")
        return

    active_tests[user_id] = 'manual'
    await send_manual_question(user_id)

async def send_manual_question(user_id: int):
    if user_id not in active_tests or active_tests[user_id] != 'manual':
        return

    words = await get_words_for_user(user_id)
    if not words:
        await bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add.")
        del active_tests[user_id]
        return

    word = random.choice(words)
    original, translation = word
    pending_answers[user_id] = (original, translation)
    await bot.send_message(user_id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: **{original}**?", parse_mode="Markdown", reply_markup=stop_test_keyboard)

@router.message()
async def handle_user_translation(message: Message):
    user_id = message.from_user.id
    if user_id not in active_tests or active_tests[user_id] != 'manual':
        return

    user_input = message.text.strip().lower()
    _, correct_translation = pending_answers[user_id]
    valid_answers = [t.strip().lower() for t in correct_translation.split(',')]

    if user_input in valid_answers:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=stop_test_keyboard)
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {correct_translation}", reply_markup=stop_test_keyboard)

    await send_manual_question(user_id)

@router.poll_answer()
async def poll_answer_handler(poll_answer: PollAnswer):
    user_id = poll_answer.user.id
    if user_id in active_tests:
        if user_id in current_polls and poll_answer.poll_id == current_polls[user_id]:
            await send_next_quiz(user_id)
        else:
            await send_next_reverse_quiz(user_id)



@router.message(Command("stop_test"))
async def stop_test(message: Message):
    user_id = message.from_user.id
    if user_id in active_tests:
        del active_tests[user_id]
        current_polls.pop(user_id, None)
        pending_answers.pop(user_id, None)
        await state.clear()
        await message.answer("–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("–¢–µ—Å—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")

@router.callback_query(lambda c: c.data == "stop_test")
async def stop_test_button(callback_query):
    user_id = callback_query.from_user.id
    if user_id in active_tests:
        del active_tests[user_id]
        current_polls.pop(user_id, None)
        pending_answers.pop(user_id, None)
        await callback_query.message.answer("–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await callback_query.answer()



# ------ –¢–µ—Å—Ç–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π handler –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ/—É–¥–∞–ª–∏—Ç—å later) -----
@router.message(Command("game_test"))
async def game_test(message: Message):
    logger.info("game_test called for %s", message.from_user.id)
    await message.answer("handler /game_test —Ä–∞–±–æ—Ç–∞–µ—Ç")

# ---------------- include router (–í–ê–ñ–ù–û: –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö handler'–æ–≤) ------------
dp.include_router(router)

# ---------------- commands list –∏ –∑–∞–ø—É—Å–∫ ----------------
private = [
    BotCommand(command='start', description='–Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'),
    BotCommand(command='test', description='–ù–∞—á–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç'),
    BotCommand(command='swap_test', description='–ù–∞—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç'),
    BotCommand(command='manual_test', description='–ù–∞—á–∞—Ç—å —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç'),
    BotCommand(command='delete_all', description='–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤'),
    BotCommand(command='list', description='–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–æ–∫–∞ —Å–ª–æ–≤'),
    BotCommand(command='game', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É')
]

async def init_and_start():
    await init_db()
    await bot.set_my_commands(commands=private, scope=BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(init_and_start())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
