# main.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –¥–µ—Ñ–∏—Å–æ–≤ –∏ —Ç–∏—Ä–µ)
from aiogram import Bot, Dispatcher, Router
from aiogram.types import (
    Message, PollAnswer, BotCommandScopeAllPrivateChats,
    BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)
from aiogram.filters import Command, CommandStart
from sql import init_db, get_words_for_user, add_word, delete_all_words
from config import API_TOKEN
import random
import logging
import asyncio
import fitz
import re
import json
import urllib.parse
from aiogram import types

# ---------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

active_tests = {}
current_polls = {}
pending_answers = {}

stop_test_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="stop_test")]]
)

# ---------------- –ö–æ–º–∞–Ω–¥–∞ /start ----------------
@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.\n\n"
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "- /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ (–ø—Ä–∏–º–µ—Ä: work - —Ä–∞–±–æ—Ç–∞, mother-in-law - —Ç—ë—â–∞)\n"
        "- –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª .txt –∏–ª–∏ .pdf —Å –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤\n"
        "- /list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤\n"
        "- /delete_all ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞\n"
        "- /test ‚Äî —Ç–µ—Å—Ç (—Å–ª–æ–≤–æ ‚Üí –ø–µ—Ä–µ–≤–æ–¥)\n"
        "- /swap_test ‚Äî –æ–±—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç (–ø–µ—Ä–µ–≤–æ–¥ ‚Üí —Å–ª–æ–≤–æ)\n"
        "- /manual_test ‚Äî —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç\n"
        "- /game ‚Äî –º–∏–Ω–∏-–∏–≥—Ä–∞ üéÆ"
    )

# ---------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ ----------------
@router.message(Command("add"))
async def add_command(message: Message):
    user_id = message.from_user.id
    try:
        _, words_text = message.text.split(maxsplit=1)

        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –ø–æ –∑–∞–ø—è—Ç—ã–º, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –¥–µ—Ñ–∏—Å–Ω—ã–µ —Å–ª–æ–≤–∞
        pairs = re.split(r',(?![^()]*\))', words_text)

        added_words = []
        for pair in pairs:
            pair = pair.strip()
            if not pair:
                continue

            # üß† –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏—Ä–µ, –Ω–µ –ø–æ –¥–µ—Ñ–∏—Å—É –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞
            parts = re.split(r'\s*[-‚Äì‚Äî]\s*', pair, maxsplit=1)

            if len(parts) == 2:
                phrase, translation = parts
                phrase = phrase.strip()
                translation = translation.strip()
                if phrase and translation:
                    await add_word(phrase, translation, user_id)
                    added_words.append(f"{phrase} ‚Äî {translation}")

        if added_words:
            await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞:\n" + "\n".join(added_words))
        else:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥.\n\n"
                                 "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: `book - –∫–Ω–∏–≥–∞`, `mother-in-law - —Ç—ë—â–∞`")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤: %s", e)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤.")

# ---------------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ----------------
@router.message(lambda message: message.document and message.document.file_name.lower().endswith(('.txt', '.pdf')))
async def handle_file(message: Message):
    user_id = message.from_user.id
    file = await bot.get_file(message.document.file_id)
    file_path = file.file_path
    file_content = await bot.download_file(file_path)

    try:
        if message.document.file_name.lower().endswith('.txt'):
            content = file_content.read().decode('utf-8', errors='ignore')
        else:
            with open("temp.pdf", "wb") as f:
                f.write(file_content.read())
            doc = fitz.open("temp.pdf")
            content = "".join(page.get_text() for page in doc)
            doc.close()

        added_words = []
        for line in content.splitlines():
            line = line.strip()
            if not line:
                continue

            # üß† –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ–º —Ç–∏—Ä–µ, –Ω–æ –Ω–µ –¥–µ—Ñ–∏—Å
            parts = re.split(r'\s*[-‚Äì‚Äî]\s*', line, maxsplit=1)

            if len(parts) == 2:
                phrase, translation = parts
                phrase = phrase.strip()
                translation = translation.strip()
                if phrase and translation:
                    await add_word(phrase, translation, user_id)
                    added_words.append(f"{phrase} ‚Äî {translation}")

        if added_words:
            await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞:\n" + "\n".join(added_words[:50]))
        else:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥.\n"
                                 "–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã —Ç–∏—Ä–µ –±—ã–ª–æ –º–µ–∂–¥—É —Å–ª–æ–≤–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º, –∞ –Ω–µ –¥–µ—Ñ–∏—Å–æ–º –≤ —Å–ª–æ–≤–µ.")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: %s", e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")

# ---------------- –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ ----------------
@router.message(Command("list"))
async def list_words(message: Message):
    user_id = message.from_user.id
    words = await get_words_for_user(user_id)
    if not words:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ /add.")
        return
    text = "\n".join([f"{w} ‚Äî {t}" for w, t in words])
    for chunk in chunk_list(text.splitlines(), 50):
        await message.answer("\n".join(chunk))

def chunk_list(lst, chunk_size):
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]

# ---------------- –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤ ----------------
@router.message(Command("delete_all"))
async def delete_all_command(message: Message):
    user_id = message.from_user.id
    await delete_all_words(user_id)
    await message.answer("üóë –í—Å–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã!")

# ---------------- GAME ----------------
GITHUB_GAME_URL = "https://shahriyor20042004.github.io/Game/"

@router.message(Command("game"))
async def send_game(message: types.Message):
    user_id = message.from_user.id
    words = await get_words_for_user(user_id)

    if not words:
        await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /add.")
        return

    # ‚úÖ –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 30 —Å–ª–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 500+
    MAX_WORDS = 30
    selected_words = random.sample(words, min(MAX_WORDS, len(words)))

    words_json = json.dumps(selected_words, ensure_ascii=False)
    words_param = urllib.parse.quote(words_json)
    url = f"{GITHUB_GAME_URL}?words={words_param}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=url))]]
    )

    await message.answer(
        f"üöÄ –ó–∞–ø—É—Å–∫–∞–π –∏–≥—Ä—É!\nüìö –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è {len(selected_words)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–≤–æ–µ–π –±–∞–∑—ã.",
        reply_markup=keyboard
    )

# ---------------- –¢–µ—Å—Ç—ã ----------------
async def send_next_quiz(user_id):
    words = await get_words_for_user(user_id)
    if not words:
        await bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add.")
        active_tests.pop(user_id, None)
        return
    phrase, correct = random.choice(words)
    options = [correct] + random.sample([w[1] for w in words if w[1] != correct], min(3, len(words)-1))
    random.shuffle(options)
    poll = await bot.send_poll(
        chat_id=user_id,
        question=f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '{phrase}'?",
        options=options,
        type="quiz",
        correct_option_id=options.index(correct),
        is_anonymous=False,
        reply_markup=stop_test_keyboard
    )
    current_polls[user_id] = ("test", poll.poll.id)

@router.message(Command("test"))
async def start_test(message: Message):
    user_id = message.from_user.id
    if user_id in active_tests:
        await message.answer("–¢–µ—Å—Ç —É–∂–µ –∏–¥—ë—Ç!", reply_markup=stop_test_keyboard)
        return
    active_tests[user_id] = "test"
    await message.answer("üß† –¢–µ—Å—Ç –Ω–∞—á–∞—Ç!", reply_markup=stop_test_keyboard)
    await send_next_quiz(user_id)

# ---- –û–±—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç ----
async def send_next_swap_quiz(user_id):
    words = await get_words_for_user(user_id)
    if not words:
        await bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add.")
        active_tests.pop(user_id, None)
        return
    correct, question = random.choice(words)
    options = [correct] + random.sample([w[0] for w in words if w[0] != correct], min(3, len(words)-1))
    random.shuffle(options)
    poll = await bot.send_poll(
        chat_id=user_id,
        question=f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç '{question}'?",
        options=options,
        type="quiz",
        correct_option_id=options.index(correct),
        is_anonymous=False,
        reply_markup=stop_test_keyboard
    )
    current_polls[user_id] = ("swap", poll.poll.id)

@router.message(Command("swap_test"))
async def swap_test(message: Message):
    user_id = message.from_user.id
    if user_id in active_tests:
        await message.answer("–¢–µ—Å—Ç —É–∂–µ –∏–¥—ë—Ç!", reply_markup=stop_test_keyboard)
        return
    active_tests[user_id] = "swap"
    await message.answer("üîÑ –û–±—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞—á–∞—Ç!", reply_markup=stop_test_keyboard)
    await send_next_swap_quiz(user_id)

# ---- –†—É—á–Ω–æ–π —Ç–µ—Å—Ç ----
@router.message(Command("manual_test"))
async def manual_test(message: Message):
    user_id = message.from_user.id
    if user_id in active_tests:
        await message.answer("–¢–µ—Å—Ç —É–∂–µ –∏–¥—ë—Ç!", reply_markup=stop_test_keyboard)
        return
    active_tests[user_id] = "manual"
    await send_manual_question(user_id)

async def send_manual_question(user_id):
    words = await get_words_for_user(user_id)
    if not words:
        await bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç.")
        active_tests.pop(user_id, None)
        return
    word, translation = random.choice(words)
    pending_answers[user_id] = translation.lower()
    await bot.send_message(user_id, f"‚úçÔ∏è –ü–µ—Ä–µ–≤–µ–¥–∏: **{word}**", parse_mode="Markdown", reply_markup=stop_test_keyboard)

@router.message()
async def handle_manual_answer(message: Message):
    user_id = message.from_user.id
    if user_id not in active_tests or active_tests[user_id] != "manual":
        return
    correct = pending_answers.get(user_id, "")
    if message.text.strip().lower() == correct:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=stop_test_keyboard)
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}", reply_markup=stop_test_keyboard)
    await send_manual_question(user_id)

# ---- –û—Ç–≤–µ—Ç—ã –≤ –æ–ø—Ä–æ—Å–∞—Ö ----
@router.poll_answer()
async def poll_answer_handler(poll_answer: PollAnswer):
    user_id = poll_answer.user.id
    if user_id not in current_polls:
        return
    mode, _ = current_polls[user_id]
    if mode == "test":
        await send_next_quiz(user_id)
    elif mode == "swap":
        await send_next_swap_quiz(user_id)

# ---- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤ ----
@router.message(Command("stop_test"))
async def stop_test(message: Message):
    user_id = message.from_user.id
    for d in (active_tests, current_polls, pending_answers):
        d.pop(user_id, None)
    await message.answer("‚õîÔ∏è –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@router.callback_query(lambda c: c.data == "stop_test")
async def stop_test_button(callback_query):
    user_id = callback_query.from_user.id
    for d in (active_tests, current_polls, pending_answers):
        d.pop(user_id, None)
    await callback_query.message.answer("‚õîÔ∏è –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await callback_query.answer()

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
dp.include_router(router)

private = [
    BotCommand(command='start', description='–Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'),
    BotCommand(command='add', description='–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞'),
    BotCommand(command='list', description='–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤'),
    BotCommand(command='delete_all', description='—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞'),
    BotCommand(command='test', description='–Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç'),
    BotCommand(command='swap_test', description='–æ–±—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç'),
    BotCommand(command='manual_test', description='—Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç'),
    BotCommand(command='game', description='–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É')
]

async def init_and_start():
    await init_db()
    await bot.set_my_commands(commands=private, scope=BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(init_and_start())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
